package service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;

import VO.MenuVO;
import VO.StoreVO;
import VO.UserVO;
import controller.Controller;
import controller.RotateController;
import dao.UserDao;
import data.Database;
import data.Session;

public class UserService {

	private static UserService instance;

	private UserService() {
	}

	public static UserService getInstance() {
		if (instance == null) {
			instance = new UserService();
		} 
		return instance;
	}

	UserDao userDao = new UserDao();
	
	
	
	public void createUser() {  // 계정 생성
		Scanner s = new Scanner(System.in);
		
		String id = null;
		UserVO idCheck = null;
		do {
			System.out.println("아이디 :");
			id = s.nextLine();

			HashMap<String, String> param = new HashMap<>();
			param.put("ID", id);
			idCheck = userDao.selectUser(param);

			if (idCheck != null) { // 로그인 할 때 사용하는 메소드이므로 null이 아니면 아이디가 있다는 의미
				System.out.println("사용할 수 없는 아이디 입니다.");
			}
		} while (idCheck != null);  // null 이면 

		System.out.println("비밀번호 : ");
		String password = s.nextLine();
		System.out.println("이름 : ");
		String name = s.nextLine();
		String gender = null;
		
		boolean isVaild = true;
		while(isVaild) {
			System.out.println("성별 : 1.남자  2.여자");
			int choice = Integer.parseInt(s.nextLine());
			switch(choice) {
			case 1 :
				gender = "남자";
				isVaild = false;
				break;
			case 2 :
				gender = "여자";
				isVaild = false;
				break;
			default : 
				System.out.println("유효하지 않은 선택입니다.");
			}
		}
		
		isVaild = true;
		int grade = 9;
		while(isVaild) {
			System.out.println("가입자 대상 : 1.일반유저   2.점주");
			int choice = Integer.parseInt(s.nextLine());
			switch(choice) {
			case 1 :
				grade = 1;
				isVaild = false;
				break;
			case 2 :
				grade = 2;
				isVaild = false;
				break;
			default : 
				System.out.println("유효하지 않은 선택입니다.");
			}
		}
		
		System.out.println("전화 번호 : ");
		String hp = s.nextLine();
		
		
		isVaild = true;
		String address = "";
		while(isVaild) {
			System.out.println("주소 : 1.동구  2.서구  3.중구  4.대덕구  5.유성구");
			int choice = Integer.parseInt(s.nextLine());
			switch(choice) {
			case 1 :
				address += "동구";
				isVaild = false;
				break;
			case 2 :
				address += "서구";
				isVaild = false;
				break;
			case 3 :
				address += "중구";
				isVaild = false;
				break;
			case 4 :
				address += "대덕구";
				isVaild = false;
				break;
			case 5 :
				address += "유성구";
				isVaild = false;
				break;
			default : 
				System.out.println("유효하지 않은 선택입니다.");
			}
		}
		System.out.println("세부 주소 : ");
		address += " " + s.nextLine();
		
		
		String nickName = "";
		UserVO nickCheck = null;
		do {
			System.out.println("닉네임 : ");
			nickName = s.nextLine();
			
			nickCheck = userDao.selectNickName(nickName); // 중복이면 null이 아닌 값 반환.
		
			if(nickCheck != null) {
				System.out.println("중복된 닉네임 입니다.");
			}
		} while (nickCheck != null); // null이면 중복이 아니므로 닉네임 사용가능을 뜻하고 반복 종료.
		
		
		UserVO user = new UserVO();

		user.setUserid(id);
		user.setPassword(password);
		user.setUserName(name);
		user.setGender(gender);
		user.setGrade(grade);
		user.setHp(hp);
		user.setAddress(address);
		user.setNickName(nickName);
		
		userDao.insertUser(user);
		System.out.println("가입해주셔서 감사합니다.");

	}
	
	
	
	
	
	public void userLogin() {
		Scanner s = new Scanner(System.in);
		
		String id = null;
		String password = null;
		boolean isCheck = true;
		
		do {
		System.out.println("아이디를 입력하세요. : ");
		id = s.nextLine();
		System.out.println("비밀번호를 입력하세요. : ");
		password = s.nextLine();
		
		UserVO isVaild = userDao.loginCheckID(id, password); // 입력한 아이디 비번이 같으면 해당 유저 객체를 리턴
															 // 다르면 null값을 리턴.
		if(isVaild == null) {
			System.out.println("아이디 또는 비밀번호가 옳바르지 않습니다.\n다시 입력하세요.");
		} else {
			Session.CurrentLoginUser = isVaild;
			isCheck = false;   // 로그인 정보가 일치하면 로그인 정보 입력창을 빠져나가기 위한 boolean 값 전환
		}
			
		} while(isCheck); // do-while end
		
		System.out.println(Session.CurrentLoginUser.getUserName() + "님 환영합니다!");
		Controller ct = new Controller();  
		
		ct.userController();  // 다음 메뉴창 메소드 실행.
		
		
	} // method end
	
	
	
	

	public void showUserTest() {   // 유저 내역이 잘 저장 되었는지 테스트용 메소드.
		Database database = Database.getInstance();
		for(int i = 0; i < database.tb_user.size(); i++) {
			System.out.println(database.tb_user.get(i));
		}
	}

	
	
	
	public void showResturant(int choice) {
		
		ArrayList<StoreVO> store = userDao.checkResturantChoice(choice); // 입력받은 번호(음식종류)의 점포가 임시로 저장됨.
		
		for(int i = 0; i < store.size(); i++){
			System.out.println(store.get(i).getStoreName());
			System.out.println(store.get(i).getFoodType());
			System.out.println(store.get(i).getMinimumOrder());
			System.out.println(store.get(i).getDeliveryTime());
			
		}
		
		RotateController rtControl = new RotateController();
		rtControl.foodMenuController(store);  // 선택한 번호(음식종류)로 저장된 리스트를 메뉴선택 컨트롤러에 전달.
		
	}
	
	
	public void showFoodMenu(int choice, ArrayList<StoreVO> store) {  // 점포 선택 시 그 점포의 음식 메뉴를 보여주는 메소드.
		Database database = Database.getInstance();
		StoreVO selectedStore = store.get(choice - 1);
		
		System.out.println("========Menu========");
		for(MenuVO menu : database.tb_menu) {
			
			if(selectedStore.getStoreNum() == menu.getStoreNum()) {
				System.out.println(menu);
			}
		}
		
		
	}

	
	public void game(){
		
	}
	
	
	
	
	
	
	
} // end class
